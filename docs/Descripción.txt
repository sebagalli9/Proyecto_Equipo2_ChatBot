El bot funciona con fases de preguntas y el CoreBot es el encargado de administrar esas fases a través de handlers . En la clase CoreBot se arma la cadena de responsabilidad con estos handlers, donde se organiza el orden de las fases y donde cada handler maneja una de esas fases. La primer fase que debe correr es la que nosotros llamamos Preguntas Iniciales y el handler asociado es AskInitialQuestionStateHandler. Para simplificar, conviene enfocarnos solo en ese handler, porque la solución al problema que voy a explicar debería trasladarse también a los demás handlers.

Cada handler (de tipo IStateHandler) tiene en uno de sus parámetros un parámetro de tipo IMessageReceiver. Este es el tipo que usa el CoreBot para recibir respuestas de un usuario. Actualmente esta interfaz nos permite correr el programa para recibir respuestas o desde la consola (cuando se corre con un ConsoleReceiver de tipo IMessageReceiver) o desde telegram (cuando se corre con un TelegramGateway que es de tipo IMessageReceiver y IMessageSender). Estas dos clases de tipo IMessageReceiver implementan con ello un método llamado GetInput. En la clase de AskInitialQuestionStateHandler podemos identificar ese método en la línea:
string ans = input.GetInput();

Para el caso de la consola, la implementación de este GetInput es un Console.Readline()

public string GetInput()   { return Console.ReadLine();  }

Pero para el caso de TelegramGateway, la implementación tiene que ser diferente y es ahí dónde estamos teniendo el problema. Lo que debe llegar a la variable ans del AskInitialQuestionStateHandler tiene que ser el valor de callback del botón que se seleccionó. 

Implementación de GetInput en TelegramGateway: 
public string GetInput()  { return callbackValue;  }

En la clase TelegramGateway, callbackValue es una variable local en la cual almacenamos los valores de callback que se reciben cada vez que se apreta un botón (el valor se va sobreescribiendo cada vez que llega uno nuevo).

Actualmente el valor de ans (que recibe indirectamente el valor de callbackValue) está llegando vacío, por lo que a partir de allí creemos que se está introduciendo un error que detiene el flujo de AskInitialQuestionStateHandler.

Creemos que la razón por la que este valor llega vacío puede deberse a lo siguiente:


El orden de ejecución en AskInitialQuestionStateHandler implementando TelegramGateway como su IMessageReceiver y IMessageSender es: 

(Imprimir la pregunta) 
output.SendMessage(initialQ.Question);  
(Imprimir los botones con las respuestas) 
output.SendMessageAnswers(initialQ.AnswerOptions);
(Recibir la respuesta del usuario) 
string ans = input.GetInput();

Creemos que esta última linea se ejecuta antes de que callbackValue pueda actualizar su valor (que inicialmente es vacío), por lo que el método GetInput no espera a que el usuario aprete el botón para traer el valor de callback. Nuestro problema, entonces, es que debemos introducir esa espera sin modificar (o al menos intentar no en gran medida) la firma del método GetInput, ya que debe seguir funcionando para consola y para un emulador de respuestas que estamos usando para hacer tests.